import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as i,o as e}from"./app-CYsXIaiR.js";const l={};function p(t,s){return e(),a("div",null,s[0]||(s[0]=[i(`<blockquote><p>第83期 cowplot包进行拼图及注释</p><p>本期介<strong>绍R语言cowplot包的效果和详细教程</strong></p><p>个人觉得是<strong>目前最好的R语言拼图包</strong></p><p>内容主要基于包的<a href="https://wilkelab.org/cowplot/" target="_blank" rel="noopener noreferrer">完全文档的翻译和笔记</a></p><p><strong>第四部分详细功能展示非常详细，有需要的朋友可以先不看，或者找有时间的时候看</strong>。公众号不支持目录跳转，所以导出推文全文为PDF，后台回复“<strong>240329</strong>”获取</p></blockquote><h2 id="cowplot安装" tabindex="-1"><a class="header-anchor" href="#cowplot安装"><span>Cowplot安装</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># 安装CRAN版本</span></span>
<span class="line"><span>install.packages(&quot;cowplot&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>#安装较新版本 </span></span>
<span class="line"><span>remotes::install_github(&quot;wilkelab/cowplot&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cowplot粗略介绍" tabindex="-1"><a class="header-anchor" href="#cowplot粗略介绍"><span>Cowplot粗略介绍</span></a></h2><p>cowplot包提供了各种功能，帮助创建满足出版质量的图形，<strong>例如一套修改主题、对齐图形和将它们排列成复杂的复合图形的函数，以及简化图形注释和混合图形与image的功能</strong>。</p><h4 id="主题" tabindex="-1"><a class="header-anchor" href="#主题"><span>主题</span></a></h4><p>cowplot最初是为了提供一个<strong>简单、干净的主题，类似于 ggplot2 的 theme_classic()</strong>。然而，随着软件包功能的增加，这种选择越来越成问题，因此从 1.0 版开始，cowplot 不再改变默认的 ggplot2 主题。</p><p>重要的是，<strong>cowplot 软件包现在提供了一组具有不同功能的互补主题</strong>。不存在一个适用于所有图形的单一主题，建议绘制每幅图时都明确设置一个主题。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># classic cowplot theme</span></span>
<span class="line"><span>ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) + </span></span>
<span class="line"><span>  geom_point() +</span></span>
<span class="line"><span>  theme_cowplot(12)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291051514.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="用网格来排版拼接图形" tabindex="-1"><a class="header-anchor" href="#用网格来排版拼接图形"><span>用网格来排版拼接图形</span></a></h3><p>cowplot 软件包提供了 plot_grid()函数，用于将绘图排列成网格并贴上标签。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>p1 &lt;- ggplot(mtcars, aes(disp, mpg)) + </span></span>
<span class="line"><span>  geom_point()</span></span>
<span class="line"><span>p2 &lt;- ggplot(mtcars, aes(qsec, mpg)) +</span></span>
<span class="line"><span>  geom_point()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>plot_grid(p1, p2, labels = c(&#39;A&#39;, &#39;B&#39;), label_size = 12)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291053884.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>plot_grid() 最初是为 ggplot2 编写的，但它也支持其他绘图框架，<strong>如 base graphics。</strong></p><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291053159.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="添加图形文字或图形标注" tabindex="-1"><a class="header-anchor" href="#添加图形文字或图形标注"><span>添加图形文字或图形标注</span></a></h3><p>plot_grid() 建立在通用绘图层之上，它允许我们以图像的形式捕捉绘图，然后在绘图中或绘图之上绘图</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>p &lt;- ggplot(mtcars, aes(disp, mpg)) + </span></span>
<span class="line"><span>  geom_point(size = 1.5, color = &quot;blue&quot;) +</span></span>
<span class="line"><span>  theme_cowplot(12)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>logo_file &lt;- system.file(&quot;extdata&quot;, &quot;logo.png&quot;, package = &quot;cowplot&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ggdraw(p) + </span></span>
<span class="line"><span>  draw_image(logo_file, x = 1, y = 1, hjust = 1, vjust = 1, width = 0.13, height = 0.2)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291054276.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>在这里，ggdraw() 会获取绘图的快照，并以全尺寸将其放入一个新的绘图画布中。然后，函数 draw_image() 会在绘图上绘制图像。</p><p>要创建水印，我们可以颠倒顺序，先设置一个空的绘图画布，然后绘制图像，再在上面绘制绘图。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ggdraw() + </span></span>
<span class="line"><span>  draw_image(logo_file, scale = 0.5) +</span></span>
<span class="line"><span>  draw_plot(p)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291055140.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h2 id="cowplot函数展示" tabindex="-1"><a class="header-anchor" href="#cowplot函数展示"><span>Cowplot函数展示</span></a></h2><h3 id="图形组合" tabindex="-1"><a class="header-anchor" href="#图形组合"><span>图形组合</span></a></h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>align_margin()</td><td>沿指定边距对齐多个图形</td></tr><tr><td>align_plots()</td><td>垂直和/或水平对齐多个图形</td></tr><tr><td>plot_grid()</td><td>将多个图形排列成网格</td></tr></tbody></table><h3 id="绘图" tabindex="-1"><a class="header-anchor" href="#绘图"><span>绘图</span></a></h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>draw_figure_label()</td><td>为图形添加标签</td></tr><tr><td>draw_grob()</td><td>绘制grob</td></tr><tr><td>draw_image()</td><td>绘制图像</td></tr><tr><td>draw_label()</td><td>绘制文本标签或数学表达式</td></tr><tr><td>draw_line()</td><td>用连接点绘制线条</td></tr><tr><td>draw_plot()</td><td>绘制（子）图形</td></tr><tr><td>draw_plot_label()</td><td>为图形添加标签</td></tr><tr><td>draw_text()</td><td>一次性绘制多个文本字符串</td></tr><tr><td>stamp(), stamp_good(), stamp_bad(), stamp_wrong(), stamp_ugly()</td><td>用标签（如好、坏、错误、丑）标记图形</td></tr></tbody></table><h3 id="主题-1" tabindex="-1"><a class="header-anchor" href="#主题-1"><span>主题</span></a></h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>theme_cowplot(), theme_half_open()</td><td>创建默认的cowplot主题</td></tr><tr><td>theme_map()</td><td>创建绘制地图的主题</td></tr><tr><td>theme_minimal_grid(), theme_minimal_vgrid(), theme_minimal_hgrid()</td><td>带网格的极简主题</td></tr><tr><td>theme_nothing()</td><td>创建一个完全空白的主题</td></tr></tbody></table><h3 id="获取方法" tabindex="-1"><a class="header-anchor" href="#获取方法"><span>获取方法</span></a></h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>get_legend()</td><td>检索图形的图例</td></tr><tr><td>get_panel(), get_panel_component()</td><td>检索图形的面板或面板的一部分</td></tr><tr><td>get_plot_component(), plot_component_names(), plot_components()</td><td>获取图形组件</td></tr><tr><td>get_title(), get_subtitle()</td><td>获取图形标题</td></tr><tr><td>get_y_axis(), get_x_axis()</td><td>获取图形的轴线</td></tr></tbody></table><h3 id="grobs" tabindex="-1"><a class="header-anchor" href="#grobs"><span>Grobs</span></a></h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>gtable_remove_grobs()</td><td>从gtable中移除命名元素</td></tr><tr><td>gtable_squash_cols(), gtable_squash_rows()</td><td>将给定列/行的尺寸设置为0</td></tr><tr><td>as_grob(), as_gtable(), plot_to_gtable()</td><td>将图形或其他图形对象转换为gtable或grob</td></tr></tbody></table><h3 id="输出" tabindex="-1"><a class="header-anchor" href="#输出"><span>输出</span></a></h3><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>ggsave2()</td><td>Cowplot对ggsave()的重新实现</td></tr><tr><td>save_plot()</td><td>ggsave()的替代品，对多图形图表支持更好</td></tr><tr><td>png_null_device(), pdf_null_device(), cairo_null_device(), agg_null_device()</td><td>空设备</td></tr><tr><td>set_null_device()</td><td>设置空图形设备</td></tr></tbody></table><h2 id="cowplot功能详细展示" tabindex="-1"><a class="header-anchor" href="#cowplot功能详细展示"><span>Cowplot功能详细展示</span></a></h2><h3 id="在网格中拼图" tabindex="-1"><a class="header-anchor" href="#在网格中拼图"><span>在网格中拼图</span></a></h3><h4 id="基础用法" tabindex="-1"><a class="header-anchor" href="#基础用法"><span>基础用法</span></a></h4><p>plot_grid() 函数提供了一个简单的界面，用于将图形排列成网格并添加标签。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>library(ggplot2)</span></span>
<span class="line"><span>library(cowplot)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>p1 &lt;- ggplot(mtcars, aes(disp, mpg)) + </span></span>
<span class="line"><span>  geom_point()</span></span>
<span class="line"><span>p2 &lt;- ggplot(mtcars, aes(qsec, mpg)) +</span></span>
<span class="line"><span>  geom_point()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>plot_grid(p1, p2, labels = c(&#39;A&#39;, &#39;B&#39;))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291102694.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>如果指定标签为 labels = &quot;AUTO&quot; 或 labels = &quot;auto&quot;，则标签将分别以大写或小写自动生成。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>plot_grid(p1, p2, labels = &quot;AUTO&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291103767.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>plot_grid(p1, p2, labels = &quot;auto&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291103478.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>默认情况下，绘图不会对齐，但在很多情况下，可以通过对齐选项对齐。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>p3 &lt;- p1 + </span></span>
<span class="line"><span>  # use large, rotated axis tick labels to highlight alignment issues</span></span>
<span class="line"><span>  theme(axis.text.x = element_text(size = 14, angle = 90, vjust = 0.5))</span></span>
<span class="line"><span></span></span>
<span class="line"><span># plots are drawn without alignment</span></span>
<span class="line"><span>plot_grid(p3, p2, labels = &quot;AUTO&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291103526.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># plots are drawn with horizontal alignment</span></span>
<span class="line"><span>plot_grid(p3, p2, labels = &quot;AUTO&quot;, align = &quot;h&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291104757.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>如果需要更复杂的绘图排列或其他特殊效果，可能需要在对齐参数之外指定轴参数。</p><p>函数 plot_grid() 可以处理各种不同类型的绘图和图形对象，而不仅仅是 ggplot2 绘图。有关详情，请参阅混合使用不同绘图框架的小节。不过，只有 ggplot2 绘图才支持对齐绘图</p><h4 id="微调绘图网格" tabindex="-1"><a class="header-anchor" href="#微调绘图网格"><span>微调绘图网格</span></a></h4><p>您可以通过 label_size 选项调整标签大小。默认值为 14，因此数值越大标签越大，数值越小标签越小。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>plot_grid(p1, p2, labels = &quot;AUTO&quot;, label_size = 12)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291105902.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>您还可以调整标签的字体族、字面和颜色。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>plot_grid(</span></span>
<span class="line"><span>  p1, p2,</span></span>
<span class="line"><span>  labels = &quot;AUTO&quot;, </span></span>
<span class="line"><span>  label_fontfamily = &quot;serif&quot;,</span></span>
<span class="line"><span>  label_fontface = &quot;plain&quot;,</span></span>
<span class="line"><span>  label_colour = &quot;blue&quot;</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291105675.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>标签可以通过 label_x 和 label_y 参数移动，通过 hjust 和 vjust 参数对齐。例如，要将标签置于左下角，可以写入</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>plot_grid(</span></span>
<span class="line"><span>  p1, p2,</span></span>
<span class="line"><span>  labels = &quot;AUTO&quot;,</span></span>
<span class="line"><span>  label_size = 12,</span></span>
<span class="line"><span>  label_x = 0, label_y = 0,</span></span>
<span class="line"><span>  hjust = -0.5, vjust = -0.5</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291106137.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>通过向选项 label_x、label_y、hjust 和 vjust 传递调整值向量，可以逐个调整各个标签（示例未显示）。</p><p>可以通过 nrow 和 ncol 指定绘图网格的行数和列数。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># arrange two plots into one column</span></span>
<span class="line"><span>plot_grid(</span></span>
<span class="line"><span>  p1, p2,</span></span>
<span class="line"><span>  labels = &quot;AUTO&quot;, ncol = 1</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291106296.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>参数 NULL 可用来表示网格中缺少的图块。请注意，如果开启了自动标注功能，缺失的绘图将被标注。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># the second plot in the first row and the</span></span>
<span class="line"><span># first plot in the second row are missing</span></span>
<span class="line"><span>plot_grid(</span></span>
<span class="line"><span>  p1, NULL, NULL, p2,</span></span>
<span class="line"><span>  labels = &quot;AUTO&quot;, ncol = 2</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291107819.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>行和列的相对宽度和高度可以通过 rel_widths 和 rel_heights 参数进行调整。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>plot_grid(p1, p2, labels = &quot;AUTO&quot;, rel_widths = c(1, 2))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291107539.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="嵌套绘图网格-拼图后再拼图" tabindex="-1"><a class="header-anchor" href="#嵌套绘图网格-拼图后再拼图"><span>嵌套绘图网格(拼图后再拼图)</span></a></h4><p>如果想生成一种非简单网格的图形排列，可以将一个 plot_grid() 图形插入到另一个图形中。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>bottom_row &lt;- plot_grid(p1, p2, labels = c(&#39;B&#39;, &#39;C&#39;), label_size = 12)</span></span>
<span class="line"><span>p3 &lt;- ggplot(mtcars, aes(x = qsec, y = disp)) + geom_point() + facet_wrap(~gear)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>plot_grid(p3, bottom_row, labels = c(&#39;A&#39;, &#39;&#39;), label_size = 12, ncol = 1)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291108137.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>在这种情况下，对齐可能有点麻烦。不过，通常可以通过显式调用 align_plots()来实现。诀窍在于，首先使用 align_plots() 函数沿左坐标轴垂直对齐顶行图（p3）和第一个底行图（p1）。然后将这些对齐的绘图传递给 plot_grid()。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># first align the top-row plot (p3) with the left-most plot of the</span></span>
<span class="line"><span># bottom row (p1)</span></span>
<span class="line"><span>plots &lt;- align_plots(p3, p1, align = &#39;v&#39;, axis = &#39;l&#39;)</span></span>
<span class="line"><span># then build the bottom row</span></span>
<span class="line"><span>bottom_row &lt;- plot_grid(plots[[2]], p2, labels = c(&#39;B&#39;, &#39;C&#39;), label_size = 12)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># then combine with the top row for final plot</span></span>
<span class="line"><span>plot_grid(plots[[1]], bottom_row, labels = c(&#39;A&#39;, &#39;&#39;), label_size = 12, ncol = 1)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291109202.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="拼图合用标题" tabindex="-1"><a class="header-anchor" href="#拼图合用标题"><span>拼图合用标题</span></a></h4><p>当我们使用 plot_grid() 组合图形时，可能希望添加一个横跨整个组合图形的标题。虽然 cowplot 中没有特定的函数来实现这种效果，但只需几行代码就能轻松模拟：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># make a plot grid consisting of two panels</span></span>
<span class="line"><span>p1 &lt;- ggplot(mtcars, aes(x = disp, y = mpg)) + </span></span>
<span class="line"><span>  geom_point(colour = &quot;blue&quot;) + </span></span>
<span class="line"><span>  theme_half_open(12) + </span></span>
<span class="line"><span>  background_grid(minor = &#39;none&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>p2 &lt;- ggplot(mtcars, aes(x = hp, y = mpg)) + </span></span>
<span class="line"><span>  geom_point(colour = &quot;green&quot;) + </span></span>
<span class="line"><span>  theme_half_open(12) + </span></span>
<span class="line"><span>  background_grid(minor = &#39;none&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>plot_row &lt;- plot_grid(p1, p2)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># now add the title</span></span>
<span class="line"><span>title &lt;- ggdraw() + </span></span>
<span class="line"><span>  draw_label(</span></span>
<span class="line"><span>    &quot;Miles per gallon decline with displacement and horsepower&quot;,</span></span>
<span class="line"><span>    fontface = &#39;bold&#39;,</span></span>
<span class="line"><span>    x = 0,</span></span>
<span class="line"><span>    hjust = 0</span></span>
<span class="line"><span>  ) +</span></span>
<span class="line"><span>  theme(</span></span>
<span class="line"><span>    # add margin on the left of the drawing canvas,</span></span>
<span class="line"><span>    # so title is aligned with left edge of first plot</span></span>
<span class="line"><span>    plot.margin = margin(0, 0, 0, 7)</span></span>
<span class="line"><span>  )</span></span>
<span class="line"><span>plot_grid(</span></span>
<span class="line"><span>  title, plot_row,</span></span>
<span class="line"><span>  ncol = 1,</span></span>
<span class="line"><span>  # rel_heights values control vertical title margins</span></span>
<span class="line"><span>  rel_heights = c(0.1, 1)</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291111341.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>在最后的 plot_grid 行中，需要适当选择 rel_heights 的值，以便标题周围的边距看起来正确。根据此处选择的值，标题占绘图总高度的 9%（即 0.1/1.1）。</p><h4 id="图形合用图例" tabindex="-1"><a class="header-anchor" href="#图形合用图例"><span>图形合用图例</span></a></h4><p>本小节演示如何绘制带有共享图例的复合图。</p><p>我们首先绘制一排不带图例的三幅图。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>library(ggplot2)</span></span>
<span class="line"><span>library(cowplot)</span></span>
<span class="line"><span>library(rlang)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># down-sampled diamonds data set</span></span>
<span class="line"><span>dsamp &lt;- diamonds[sample(nrow(diamonds), 1000), ]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># function to create plots</span></span>
<span class="line"><span>plot_diamonds &lt;- function(xaes) {</span></span>
<span class="line"><span>  xaes &lt;- enquo(xaes)</span></span>
<span class="line"><span>  ggplot(dsamp, aes(!!xaes, price, color = clarity)) +</span></span>
<span class="line"><span>    geom_point() +</span></span>
<span class="line"><span>    theme_half_open(12) +</span></span>
<span class="line"><span>    # we set the left and right margins to 0 to remove </span></span>
<span class="line"><span>    # unnecessary spacing in the final plot arrangement.</span></span>
<span class="line"><span>    theme(plot.margin = margin(6, 0, 6, 0))</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># make three plots</span></span>
<span class="line"><span>p1 &lt;- plot_diamonds(carat)</span></span>
<span class="line"><span>p2 &lt;- plot_diamonds(depth) + ylab(NULL)</span></span>
<span class="line"><span>p3 &lt;- plot_diamonds(color) + ylab(NULL)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># arrange the three plots in a single row</span></span>
<span class="line"><span>prow &lt;- plot_grid(</span></span>
<span class="line"><span>  p1 + theme(legend.position=&quot;none&quot;),</span></span>
<span class="line"><span>  p2 + theme(legend.position=&quot;none&quot;),</span></span>
<span class="line"><span>  p3 + theme(legend.position=&quot;none&quot;),</span></span>
<span class="line"><span>  align = &#39;vh&#39;,</span></span>
<span class="line"><span>  labels = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;),</span></span>
<span class="line"><span>  hjust = -1,</span></span>
<span class="line"><span>  nrow = 1</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span>prow</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291112770.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>现在我们手动添加图例。我们可以将图例放在绘图的一侧。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># extract the legend from one of the plots</span></span>
<span class="line"><span>legend &lt;- get_legend(</span></span>
<span class="line"><span>  # create some space to the left of the legend</span></span>
<span class="line"><span>  p1 + theme(legend.box.margin = margin(0, 0, 0, 12))</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># add the legend to the row we made earlier. Give it one-third of </span></span>
<span class="line"><span># the width of one plot (via rel_widths).</span></span>
<span class="line"><span>plot_grid(prow, legend, rel_widths = c(3, .4))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291113674.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>我们也可以将图例放在底部。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># extract a legend that is laid out horizontally</span></span>
<span class="line"><span>legend_b &lt;- get_legend(</span></span>
<span class="line"><span>  p1 + </span></span>
<span class="line"><span>    guides(color = guide_legend(nrow = 1)) +</span></span>
<span class="line"><span>    theme(legend.position = &quot;bottom&quot;)</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># add the legend underneath the row we made earlier. Give it 10%</span></span>
<span class="line"><span># of the height of one plot (via rel_heights).</span></span>
<span class="line"><span>plot_grid(prow, legend_b, ncol = 1, rel_heights = c(1, .1))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291113072.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>或者把图例放中间</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># arrange the three plots in a single row, leaving space between plot B and C</span></span>
<span class="line"><span>prow &lt;- plot_grid(</span></span>
<span class="line"><span>  p1 + theme(legend.position=&quot;none&quot;),</span></span>
<span class="line"><span>  p2 + theme(legend.position=&quot;none&quot;),</span></span>
<span class="line"><span>  NULL,</span></span>
<span class="line"><span>  p3 + theme(legend.position=&quot;none&quot;),</span></span>
<span class="line"><span>  align = &#39;vh&#39;,</span></span>
<span class="line"><span>  labels = c(&quot;A&quot;, &quot;B&quot;, &quot;&quot;, &quot;C&quot;),</span></span>
<span class="line"><span>  hjust = -1,</span></span>
<span class="line"><span>  nrow = 1,</span></span>
<span class="line"><span>  rel_widths = c(1, 1, .3, 1)</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># now add in the legend</span></span>
<span class="line"><span>prow + draw_grob(legend, 2/3.3, 0, .3/3.3, 1)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291114290.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>或者来个复杂的排版看看</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># plot 1</span></span>
<span class="line"><span>p1 &lt;- ggplot(iris, aes(Sepal.Length, Sepal.Width, color = Species)) + </span></span>
<span class="line"><span>  geom_point() + </span></span>
<span class="line"><span>  stat_smooth(method = &quot;lm&quot;) +</span></span>
<span class="line"><span>  facet_grid(. ~ Species) +</span></span>
<span class="line"><span>  theme_half_open(12) +</span></span>
<span class="line"><span>  background_grid(major = &#39;y&#39;, minor = &quot;none&quot;) + </span></span>
<span class="line"><span>  panel_border() + </span></span>
<span class="line"><span>  theme(legend.position = &quot;none&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># plot 2</span></span>
<span class="line"><span>p2 &lt;- ggplot(iris, aes(Sepal.Length, fill = Species)) +</span></span>
<span class="line"><span>  geom_density(alpha = .7) + </span></span>
<span class="line"><span>  scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +</span></span>
<span class="line"><span>  theme_half_open(12) +</span></span>
<span class="line"><span>  theme(legend.justification = &quot;top&quot;)</span></span>
<span class="line"><span>p2a &lt;- p2 + theme(legend.position = &quot;none&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># plot 3</span></span>
<span class="line"><span>p3 &lt;- ggplot(iris, aes(Sepal.Width, fill = Species)) +</span></span>
<span class="line"><span>  geom_density(alpha = .7) + </span></span>
<span class="line"><span>  scale_y_continuous(expand = c(0, 0)) +</span></span>
<span class="line"><span>  theme_half_open(12) +</span></span>
<span class="line"><span>  theme(legend.position = &quot;none&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># legend</span></span>
<span class="line"><span>legend &lt;- get_legend(p2)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># align all plots vertically</span></span>
<span class="line"><span>plots &lt;- align_plots(p1, p2a, p3, align = &#39;v&#39;, axis = &#39;l&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># put together the bottom row and then everything</span></span>
<span class="line"><span>bottom_row &lt;- plot_grid(</span></span>
<span class="line"><span>  plots[[2]], plots[[3]], legend,</span></span>
<span class="line"><span>  labels = c(&quot;B&quot;, &quot;C&quot;),</span></span>
<span class="line"><span>  rel_widths = c(1, 1, .3),</span></span>
<span class="line"><span>  nrow = 1</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span>plot_grid(plots[[1]], bottom_row, labels = c(&quot;A&quot;), ncol = 1)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291115354.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="设置主题" tabindex="-1"><a class="header-anchor" href="#设置主题"><span>设置主题</span></a></h3><h4 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用"><span>基础使用</span></a></h4><p>主题 theme_half_open()（或等价主题 theme_cowplot()）提供了一种经典的双轴线、无背景网格的图形外观。该主题适用于大多数类型的图形，但最适合散点图和折线图。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>library(ggplot2)</span></span>
<span class="line"><span>library(cowplot)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>p &lt;- ggplot(mtcars, aes(disp, mpg)) + geom_point()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>p + theme_half_open() # identical to theme_cowplot()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291118304.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>如果您喜欢背景网格，可以通过标准 ggplot2 主题选项添加。或者，也可以使用 cowplot 函数 background_grid()。这个函数需要放在主题调用之后，因为主题调用会覆盖之前所有的主题设置。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>p +</span></span>
<span class="line"><span>  theme_half_open() +</span></span>
<span class="line"><span>  background_grid() # always place this after the theme</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291118015.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>如果您喜欢带有网格且不带轴线的极简外观，请使用 theme_minimal_grid()。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>p + theme_minimal_grid()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291119887.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>所有主题都可以进一步自定义。例如，默认字体大小为 14 号，适合 5 到 8 英寸宽的数字。对于较小的数字，您可能需要使用 12 号字体。此外，我们还可以修改 theme_minimal_grid() 中网格线的颜色。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>p +</span></span>
<span class="line"><span>  theme_minimal_grid(</span></span>
<span class="line"><span>    font_size = 12,</span></span>
<span class="line"><span>    color = &quot;grey70&quot;</span></span>
<span class="line"><span>  )</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291119646.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="根据图形类型来选择不同绘图" tabindex="-1"><a class="header-anchor" href="#根据图形类型来选择不同绘图"><span>根据图形类型来选择不同绘图</span></a></h4><p>在选择绘图主题时，应始终注意它在特定绘图中的作用。例如，如果您正在绘制条形图，theme_half_open() 会因为 ggplot2 的自动轴扩展（即 x 轴线不在 y = 0 处）而生成难看的浮动条形图。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>p &lt;- ggplot(mtcars, aes(factor(cyl))) +</span></span>
<span class="line"><span>  geom_bar(fill = &quot;#56B4E9&quot;, alpha = 0.8) +</span></span>
<span class="line"><span>  theme_half_open()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>stamp_ugly(p)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291121779.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>去除条形图低端和x轴的间距是不是好看很多啦</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>p &lt;- ggplot(mtcars, aes(factor(cyl))) +</span></span>
<span class="line"><span>  geom_bar(fill = &quot;#56B4E9&quot;, alpha = 0.8) +</span></span>
<span class="line"><span>  scale_y_continuous(</span></span>
<span class="line"><span>    # don&#39;t expand y scale at the lower end</span></span>
<span class="line"><span>    expand = expansion(mult = c(0, 0.05))</span></span>
<span class="line"><span>  )</span></span>
<span class="line"><span></span></span>
<span class="line"><span>p + theme_half_open()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291121531.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>条形图在背景网格上看起来也很别扭，我建议不要使用条形图。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>stamp_ugly(</span></span>
<span class="line"><span>  p + theme_minimal_grid()</span></span>
<span class="line"><span>)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291124081.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>您可以使用 theme_minimal_hgrid()，它只会绘制水平网格线。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>p + theme_minimal_hgrid()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291124386.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>如果使用水平条形图绘制翻转条形图，则可能需要垂直网格线，这可以通过 theme_minimal_vgrid() 获得。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>p +</span></span>
<span class="line"><span>  coord_flip() +</span></span>
<span class="line"><span>  theme_minimal_vgrid()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291125829.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="分面主题" tabindex="-1"><a class="header-anchor" href="#分面主题"><span>分面主题</span></a></h4><p>在分面时需要特别注意。一个主题可能在单个情节中看起来很好，但在分面情节中却效果不佳。举个例子，看看我们使用 theme_half_open() 进行分面时会发生什么。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>p &lt;- ggplot(mtcars, aes(disp, mpg)) +</span></span>
<span class="line"><span>  facet_wrap(~factor(cyl)) +</span></span>
<span class="line"><span>  geom_point() +</span></span>
<span class="line"><span>  theme_half_open(12)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>stamp_ugly(p)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291126270.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>由于 ggplot2 不会重复每个面板的 Y 轴线，因此三个面板在视觉上并没有分开。我们可以通过调用标准 ggplot2 主题或使用便捷函数 panel_border()，在每个面板周围绘制边框，从而改善这种情况。与 background_grid()一样，该函数必须放在主题之后。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>p + panel_border()  # always place this after the theme</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291126696.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>在这种特殊情况下，也许同时使用面板边框和背景网格是最好的选择。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>p + </span></span>
<span class="line"><span>  panel_border() +</span></span>
<span class="line"><span>  background_grid()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291127733.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="空主题" tabindex="-1"><a class="header-anchor" href="#空主题"><span>空主题</span></a></h4><p>theme_map() 和 theme_nothing() 这两个主题提供了不带坐标轴的精简主题。 theme_map() 类似于 ggplot2 中的 theme_void()，它保留了绘图标题、副标题、标题和图例，只是删除了坐标轴刻度、线条、标签和网格线。所有设置都与其他 cowplot 主题相匹配，因此您可以将使用 theme_map() 的绘图与其他 cowplot 主题混合使用，而且它们看起来会保持一致。</p><p>为了演示这些主题是如何工作的，以及它们是如何与提供的其他主题交互的，让我们先制作一个包含标题、副标题、标题和图例的标准散点图。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>p &lt;- ggplot(mtcars, aes(disp, mpg, color = wt)) +</span></span>
<span class="line"><span>  geom_point() +</span></span>
<span class="line"><span>  labs(</span></span>
<span class="line"><span>    title = &quot;Fuel efficiency in cars&quot;,</span></span>
<span class="line"><span>    subtitle = &quot;Bigger and more powerful cars are less efficient&quot;,</span></span>
<span class="line"><span>    caption = &quot;Motor Trend, 1974&quot;</span></span>
<span class="line"><span>  )</span></span>
<span class="line"><span></span></span>
<span class="line"><span>p + theme_cowplot(12)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用 theme_map()，同样的图看起来如下。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>p + theme_map(12)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291128061.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>请注意，所有被保留的元素在这幅图和上一幅图中看起来都是一样的。</p><p>如果我们使用 theme_nothing() 绘制相同的曲线图，那么除了曲线图面板之外的所有元素都会被移除，包括标题和图例。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>p + theme_nothing()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291129528.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>ggdraw()和 plot_grid() 使用该主题来绘制外围画布。</p><h3 id="图形对齐-控制长宽等可对齐" tabindex="-1"><a class="header-anchor" href="#图形对齐-控制长宽等可对齐"><span>图形对齐（控制长宽等可对齐）</span></a></h3><p>在R语言中，有几个包可以用来对齐图形。除了cowplot外，<strong>最广泛使用的包括egg和patchwork</strong>。这些包采用了略有不同的方法来对齐图形，各自的方法有不同的优势和劣势。</p><p>虽然egg和patchwork在对齐和排列图形时采用相同的方式，但<strong>cowplot则独立于图形的排列对齐图形。这使得能够先对齐图形，然后再分别重现它们，甚至可以将它们叠加在一起</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>library(ggplot2)</span></span>
<span class="line"><span>library(cowplot)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>p1 &lt;- ggplot(mtcars, aes(disp, mpg)) + </span></span>
<span class="line"><span>  geom_point()</span></span>
<span class="line"><span>p2 &lt;- ggplot(mtcars, aes(disp, hp)) + </span></span>
<span class="line"><span>  geom_point()</span></span>
<span class="line"><span>p1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291013337.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>p2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291013116.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>哪怕两个绘图的 x 轴相同，但第一个绘图区域的宽度略大于第二个，因为 y 轴标签的长度不同。在文档中，如果两个绘图相互靠近显示，绘图宽度的这些差异可能会影响美观。我们可以通过垂直对齐两个绘图，然后分别绘制它们来解决这个问题。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>aligned &lt;- align_plots(p1, p2, align = &quot;v&quot;)</span></span>
<span class="line"><span>ggdraw(aligned[[1]])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291017000.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ggdraw(aligned[[2]])</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291017067.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>垂直对齐（align = &quot;v&quot;）是指任何垂直参考线（如左右 y 轴线）在绘图中对齐。相比之下，水平对齐（align = &quot;h&quot;）则是对齐水平参考线。这两种对齐方式可以单独使用（align = &quot;v&quot; 或 align = &quot;h&quot;），也可以组合使用（align = &quot;vh&quot; 或 align = &quot;hv&quot;）。</p><p>如果我们想先对齐再排列图形，可以调用 plot_grid()，并为其提供一个对齐参数。plot_grid() 函数会调用 align_plots() 对齐绘图，然后排列它们。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>plot_grid(p1, p2, ncol = 1, align = &quot;v&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291018372.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="按坐标轴对齐" tabindex="-1"><a class="header-anchor" href="#按坐标轴对齐"><span>按坐标轴对齐</span></a></h4><p>上述垂直和水平对齐方式会尝试对齐所有绘图中的每个垂直或水平元素。换句话说，坐标轴标题相互对齐，坐标轴刻度相互对齐，绘图面板相互对齐，等等。这种对齐方法只有在所有绘图具有完全相同的元素时才有效。因此，举例来说，如果我们试图将一个有分面的绘图与一个没有分面(facet)的绘图对齐，这种方法就会失败。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>p1 &lt;- ggplot(mtcars, aes(disp, mpg)) + </span></span>
<span class="line"><span>  geom_point() +</span></span>
<span class="line"><span>  theme_minimal_grid(14) + </span></span>
<span class="line"><span>  panel_border(color = &quot;black&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>p2 &lt;- ggplot(mtcars, aes(factor(vs))) + </span></span>
<span class="line"><span>  geom_bar() + </span></span>
<span class="line"><span>  facet_wrap(~am) +</span></span>
<span class="line"><span>  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +</span></span>
<span class="line"><span>  theme_minimal_hgrid(12) +</span></span>
<span class="line"><span>  panel_border(color = &quot;black&quot;) +</span></span>
<span class="line"><span>  theme(strip.background = element_rect(fill = &quot;gray80&quot;))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>plot_grid(p1, p2, align = &quot;h&quot;, rel_widths = c(1, 1.3))</span></span>
<span class="line"><span>##   Warning: Graphs cannot be horizontally aligned unless the axis parameter is</span></span>
<span class="line"><span>##  set. Placing graphs unaligned.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291022519.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>我们会收到无法对齐绘图的警告，因此绘制的绘图没有对齐。要对齐这些曲线图，我们需要告诉 align_plots() 函数曲线图的哪些部分应该对齐。有两种选择，而且都很有意义。首先，我们可以只对齐底轴（axis = &quot;b&quot;）。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>plot_grid(p1, p2, align = &quot;h&quot;, axis = &quot;b&quot;, rel_widths = c(1, 1.3))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291023129.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>其次，我们可以同时对齐底部和顶部轴线（axis = &quot;bt&quot;）</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>plot_grid(p1, p2, align = &quot;h&quot;, axis = &quot;bt&quot;, rel_widths = c(1, 1.3))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291024175.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>一般来说，轴参数告诉 align_plots() 函数只对齐特定的轴。它可以理解任意组合的 &quot;t&quot;（顶）、&quot;r&quot;（右）、&quot;b&quot;（底）和 &quot;l&quot;（左）值。</p><p>在第二个例子中，我将展示即使两个绘图包含相同数量的元素，按坐标轴对齐也是非常有用的。请看这两个垂直排列的图，首先显示的是 mpg 数据集中不同类别的汽车数量，其次是每个类别的平均城市 mpg 与该类别汽车数量的散点图。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>library(dplyr)</span></span>
<span class="line"><span>library(forcats)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>city_mpg &lt;- mpg %&gt;%</span></span>
<span class="line"><span>  mutate(class = fct_lump(class, 4, other_level = &quot;other&quot;)) %&gt;%</span></span>
<span class="line"><span>  group_by(class) %&gt;%</span></span>
<span class="line"><span>  summarize(</span></span>
<span class="line"><span>    mean_mpg = mean(cty),</span></span>
<span class="line"><span>    count = n()</span></span>
<span class="line"><span>  ) %&gt;% mutate(</span></span>
<span class="line"><span>    class = fct_reorder(class, count)</span></span>
<span class="line"><span>  )</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>p1 &lt;- ggplot(city_mpg, aes(class, count)) + </span></span>
<span class="line"><span>  geom_col() + </span></span>
<span class="line"><span>  ylim(0, 65) + </span></span>
<span class="line"><span>  coord_flip()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>p2 &lt;- ggplot(city_mpg, aes(mean_mpg, count)) + </span></span>
<span class="line"><span>  geom_point()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>plot_grid(p1, p2, ncol = 1, align = &#39;v&#39;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291025988.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>由于第一幅图的 y 轴标签很长，因此第二幅图的 y 轴标题与轴标签相距甚远。这看起来很奇怪。最好将坐标轴标题移近标签。我们可以通过按轴对齐来做到这一点。我这里只对齐左轴。对齐左轴和右轴会产生相同的结果。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>plot_grid(p1, p2, ncol = 1, align = &#39;v&#39;, axis = &#39;l&#39;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291027731.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>最后，我将分别绘制两幅图，然后将它们叠加在一起。首先，让我们再次绘制 mpg 数据集中不同级别汽车数量的柱状图。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>city_mpg &lt;- city_mpg %&gt;%</span></span>
<span class="line"><span>  mutate(class = fct_reorder(class, -mean_mpg))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>p1 &lt;- ggplot(city_mpg, aes(class, count)) +</span></span>
<span class="line"><span>  geom_col(fill = &quot;#6297E770&quot;) + </span></span>
<span class="line"><span>  scale_y_continuous(</span></span>
<span class="line"><span>    expand = expansion(mult = c(0, 0.05)),</span></span>
<span class="line"><span>    position = &quot;right&quot;</span></span>
<span class="line"><span>  ) +</span></span>
<span class="line"><span>  theme_minimal_hgrid(11, rel_small = 1) +</span></span>
<span class="line"><span>  theme(</span></span>
<span class="line"><span>    panel.grid.major = element_line(color = &quot;#6297E770&quot;),</span></span>
<span class="line"><span>    axis.line.x = element_blank(),</span></span>
<span class="line"><span>    axis.text.x = element_blank(),</span></span>
<span class="line"><span>    axis.title.x = element_blank(),</span></span>
<span class="line"><span>    axis.ticks = element_blank(),</span></span>
<span class="line"><span>    axis.ticks.length = grid::unit(0, &quot;pt&quot;),</span></span>
<span class="line"><span>    axis.text.y = element_text(color = &quot;#6297E7&quot;),</span></span>
<span class="line"><span>    axis.title.y = element_text(color = &quot;#6297E7&quot;)</span></span>
<span class="line"><span>  )</span></span>
<span class="line"><span>p1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291028363.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>现在，让我们用散点图来绘制平均城市英里数与汽车级别的关系。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>p2 &lt;- ggplot(city_mpg, aes(class, mean_mpg)) + </span></span>
<span class="line"><span>  geom_point(size = 3, color = &quot;#D5442D&quot;) + </span></span>
<span class="line"><span>  scale_y_continuous(limits = c(10, 21)) +</span></span>
<span class="line"><span>  theme_half_open(11, rel_small = 1) +</span></span>
<span class="line"><span>  theme(</span></span>
<span class="line"><span>    axis.ticks.y = element_line(color = &quot;#BB2D05&quot;),</span></span>
<span class="line"><span>    axis.text.y = element_text(color = &quot;#BB2D05&quot;),</span></span>
<span class="line"><span>    axis.title.y = element_text(color = &quot;#BB2D05&quot;),</span></span>
<span class="line"><span>    axis.line.y = element_line(color = &quot;#BB2D05&quot;)</span></span>
<span class="line"><span>  )</span></span>
<span class="line"><span>p2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291029107.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>现在，我们对齐这两幅图，然后将它们叠加在一起。这样绘制的曲线图具有双轴，通常不鼓励绘制这样的曲线图。我在这里举这个例子只是为了说明，当绘图对齐和绘图放置分开时，我们可以实现哪些类型的效果。</p><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291029182.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="叠加绘图" tabindex="-1"><a class="header-anchor" href="#叠加绘图"><span>叠加绘图</span></a></h3><p>cowplot 软件包提供了一些函数，用于绘图和叠加绘图。通过这些函数，我们可以为图形添加任意注释或背景，将图形置于其他图形内部，以更复杂的布局排列图形，或将来自不同图形系统（ggplot2, grid, lattice, base）的图形组合在一起。该功能建立在 ggplot2 的基础之上，也就是说，生成的图形是 ggplot2 对象，可以像普通 ggplot2 图形一样进行修改、扩展和输出。</p><h4 id="添加背景注释-水印也可以" tabindex="-1"><a class="header-anchor" href="#添加背景注释-水印也可以"><span>添加背景注释（水印也可以）</span></a></h4><p>我们从一些简单的注释开始，例如标签或水印。让我们从 mpg 数据集的基本图开始。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>library(ggplot2)</span></span>
<span class="line"><span>library(cowplot)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>p &lt;- ggplot(mpg, aes(displ, cty)) +</span></span>
<span class="line"><span>  geom_point() +</span></span>
<span class="line"><span>  theme_minimal_grid(12)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>p</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291035386.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>接下来，我们要给这幅图加上 &quot;draft &quot;的水印。为此，我们通过调用 ggdraw() 将绘图包裹到绘图环境中，然后通过各种 draw_*() 函数添加注释。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ggdraw(p) + </span></span>
<span class="line"><span>  draw_label(&quot;Draft&quot;, color = &quot;#C0A0A0&quot;, size = 100, angle = 45)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291036610.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p><strong>ggdraw(p)的作用是捕捉绘图的快照，使绘图有效地转化为图像，然后将图像绘制到新的 ggplot2 画布中，不显示坐标轴或背景网格</strong>。draw_* 函数只是常规几何图形的包装器。因此，在上面的示例中，我们可以使用 geom_text()，而不是 draw_label()。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ggdraw(p) + </span></span>
<span class="line"><span>  geom_text(</span></span>
<span class="line"><span>    data = data.frame(x = 0.5, y = 0.5, label = &quot;Draft&quot;),</span></span>
<span class="line"><span>    aes(x, y, label = label),</span></span>
<span class="line"><span>    hjust = 0.5, vjust = 0.5, angle = 45, size = 100/.pt,</span></span>
<span class="line"><span>    color = &quot;#C0A0A0&quot;,</span></span>
<span class="line"><span>    inherit.aes = FALSE</span></span>
<span class="line"><span>  )</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291037101.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>不过，请注意调用 geom_text() 时要啰嗦得多。此外，geom_text() 以毫米为单位解释字体大小，因此如果我们想以更传统的点为单位指定字体大小，就需要除以 .pt。相比之下，draw_label() 会为我们执行这种转换，因此我们可以直接以点为单位指定字体大小。</p><p>由于 ggdraw() 建立在 ggplot2 的基础之上，因此我们可以像处理 ggplot2 图形一样处理它的输出。例如，我们可以使用 theme() 函数来更改背景颜色。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ggdraw(p) + </span></span>
<span class="line"><span>  draw_label(&quot;Draft&quot;, color = &quot;#C0A0A0&quot;, size = 100, angle = 45) +</span></span>
<span class="line"><span>  theme(</span></span>
<span class="line"><span>    plot.background = element_rect(fill = &quot;cornsilk&quot;, color = NA)</span></span>
<span class="line"><span>  )</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291041905.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>我们还可以通过 ggsave() 以标准方式保存注释图。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>draft &lt;- ggdraw(p) + </span></span>
<span class="line"><span>  draw_label(&quot;Draft&quot;, color = &quot;#C0A0A0&quot;, size = 100, angle = 45)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ggsave(&quot;draft.pdf&quot;, draft)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(**不过，cowplot 软件包提供了ggsave()的替代函数 save_plot()，可以更方便地保存大小合适的图，**尤其是在制作复合图时）。详情请参见 save_plot() 文档）。</p><p>通常，我们可能希望注释位于绘图下方而不是上方。我们可以先用 ggdraw() 设置一个空图层，然后添加标注，再用 draw_plot() 添加绘图，这样就可以实现这一效果。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ggdraw() + </span></span>
<span class="line"><span>  draw_label(&quot;Draft&quot;, color = &quot;#C0A0A0&quot;, size = 100, angle = 45) +</span></span>
<span class="line"><span>  draw_plot(p)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291042517.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>这就要求绘图具有透明背景，而所有 cowplot 主题都符合这一要求。相比之下，ggplot2 主题则不一定如此。例如，如果我们将情节的主题改为 theme_classic()，底层标签就会被主题的白色背景所隐藏。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ggdraw() + </span></span>
<span class="line"><span>  draw_label(&quot;Draft&quot;, color = &quot;#C0A0A0&quot;, size = 100, angle = 45) +</span></span>
<span class="line"><span>  draw_plot(</span></span>
<span class="line"><span>    p + theme_classic()</span></span>
<span class="line"><span>  )</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>cowplot 主题 theme_half_open() 没有这种限制。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ggdraw() + </span></span>
<span class="line"><span>  draw_label(&quot;Draft&quot;, color = &quot;#C0A0A0&quot;, size = 100, angle = 45) +</span></span>
<span class="line"><span>  draw_plot(</span></span>
<span class="line"><span>    p + theme_half_open(12)</span></span>
<span class="line"><span>  )</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291043607.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="嵌入图形" tabindex="-1"><a class="header-anchor" href="#嵌入图形"><span>嵌入图形</span></a></h4><p>Draw_plot() 函数还允许我们在画布上任意位置放置任意大小的绘图。这对于将子图组合成非简单网格的布局非常有用，例如在较大的图形中绘制插入图。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>inset &lt;- ggplot(mpg, aes(drv)) + </span></span>
<span class="line"><span>  geom_bar(fill = &quot;skyblue2&quot;, alpha = 0.7) + </span></span>
<span class="line"><span>  scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +</span></span>
<span class="line"><span>  theme_minimal_hgrid(11)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ggdraw(p + theme_half_open(12)) +</span></span>
<span class="line"><span>  draw_plot(inset, .45, .45, .5, .5) +</span></span>
<span class="line"><span>  draw_plot_label(</span></span>
<span class="line"><span>    c(&quot;A&quot;, &quot;B&quot;),</span></span>
<span class="line"><span>    c(0, 0.45),</span></span>
<span class="line"><span>    c(1, 0.95),</span></span>
<span class="line"><span>    size = 12</span></span>
<span class="line"><span>  )</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291044069.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>该功能不仅限于 ggplot2 绘图。它也适用于基本图形。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>inset &lt;- ~{</span></span>
<span class="line"><span>  counts &lt;- table(mpg$drv)</span></span>
<span class="line"><span>  par(</span></span>
<span class="line"><span>    cex = 0.8,</span></span>
<span class="line"><span>    mar = c(3, 3, 1, 1),</span></span>
<span class="line"><span>    mgp = c(2, 1, 0)</span></span>
<span class="line"><span>  )</span></span>
<span class="line"><span>  barplot(counts, xlab = &quot;drv&quot;, ylab = &quot;count&quot;)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ggdraw(p + theme_half_open(12)) +</span></span>
<span class="line"><span>  draw_plot(inset, .45, .45, .5, .5) +</span></span>
<span class="line"><span>  draw_plot_label(</span></span>
<span class="line"><span>    c(&quot;A&quot;, &quot;B&quot;),</span></span>
<span class="line"><span>    c(0, 0.45),</span></span>
<span class="line"><span>    c(1, 0.95),</span></span>
<span class="line"><span>    size = 12</span></span>
<span class="line"><span>  )</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291045397.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="绝对定位" tabindex="-1"><a class="header-anchor" href="#绝对定位"><span>绝对定位</span></a></h4><p><strong>默认情况下，ggdraw() 使用的坐标系统使用的是 x 和 y 坐标从 0 到 1 的相对坐标</strong>。不过，有时我们需要将图形元素放置在绝对单位上，例如距离左边界正好 1 英寸。我们可以通过绘制_grob()函数支持的网格图形系统来实现。例如，下面的代码会生成一个宽度和高度均为 1 英寸的蓝色正方形，它正好位于绘图区域左侧边框 1 英寸处和顶部边框 1 英寸处。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>library(grid)</span></span>
<span class="line"><span>rect &lt;- rectGrob(</span></span>
<span class="line"><span>  x = unit(1, &quot;in&quot;),</span></span>
<span class="line"><span>  y = unit(1, &quot;npc&quot;) - unit(1, &quot;in&quot;),</span></span>
<span class="line"><span>  width = unit(1, &quot;in&quot;),</span></span>
<span class="line"><span>  height = unit(1, &quot;in&quot;),</span></span>
<span class="line"><span>  hjust = 0, vjust = 1,</span></span>
<span class="line"><span>  gp = gpar(fill = &quot;skyblue2&quot;, alpha = 0.5)</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ggdraw(p) +</span></span>
<span class="line"><span>  draw_grob(rect)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291046082.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>如果我们以不同的尺寸重新生成该图，蓝色方块将保持在相同的绝对位置，并保留其绝对尺寸。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ggdraw(p) +</span></span>
<span class="line"><span>  draw_grob(rect)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291047171.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h4 id="连接绘图-plot-和图片-image" tabindex="-1"><a class="header-anchor" href="#连接绘图-plot-和图片-image"><span>连接绘图(plot)和图片(image)</span></a></h4><p>绘图层还通过函数 draw_image()支持图像。该函数需要安装 magick 软件包，可以获取多种不同格式的图像，并将其与绘图相结合。例如，我们可以使用图像作为绘图背景：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>library(magick)</span></span>
<span class="line"><span>library(dplyr)</span></span>
<span class="line"><span>library(forcats)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>img &lt;- system.file(&quot;extdata&quot;, &quot;cow.jpg&quot;, package = &quot;cowplot&quot;) %&gt;%</span></span>
<span class="line"><span>  image_read() %&gt;%</span></span>
<span class="line"><span>  image_resize(&quot;570x380&quot;) %&gt;%</span></span>
<span class="line"><span>  image_colorize(35, &quot;white&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>p &lt;- PASWR::Cows %&gt;%</span></span>
<span class="line"><span>  filter(breed != &quot;Canadian&quot;) %&gt;%</span></span>
<span class="line"><span>  mutate(breed = fct_reorder(breed, butterfat)) %&gt;%</span></span>
<span class="line"><span>  ggplot(aes(butterfat, fill = breed)) +</span></span>
<span class="line"><span>  geom_density(alpha = 0.7) +</span></span>
<span class="line"><span>  scale_fill_grey() +</span></span>
<span class="line"><span>  coord_cartesian(expand = FALSE) +</span></span>
<span class="line"><span>  theme_minimal_hgrid(11, color = &quot;grey30&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ggdraw() + </span></span>
<span class="line"><span>  draw_image(img) + </span></span>
<span class="line"><span>  draw_plot(p)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291048102.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>我们还可以将图像作为logo添加到绘图中。除了使用 hjust 和 vjust 外，我们还使用 halign 和 valign 使图像与右上角平齐。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>logo_file &lt;- system.file(&quot;extdata&quot;, &quot;logo.png&quot;, package = &quot;cowplot&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ggdraw() + </span></span>
<span class="line"><span>  draw_plot(p) +</span></span>
<span class="line"><span>  draw_image(</span></span>
<span class="line"><span>    logo_file, x = 1, y = 1, hjust = 1, vjust = 1, halign = 1, valign = 1,</span></span>
<span class="line"><span>    width = 0.15</span></span>
<span class="line"><span>  )</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291048082.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="混合不同绘图框架的图-如ggplot2和base" tabindex="-1"><a class="header-anchor" href="#混合不同绘图框架的图-如ggplot2和base"><span>混合不同绘图框架的图(如ggplot2和base)</span></a></h3><p>除 ggplot2 对象外，所有将绘图对象作为输入的 cowplot 函数（ggdraw()、draw_plot()、plot_grid()）都可以处理多种不同类型的对象。最重要的是，它们可以处理使用基本 R 图形生成的绘图。不过，只有安装了 gridGraphics 软件包才能使用这一功能。</p><p>作为第一个示例，我们用 ggdraw() 绘制一个基本图形，并用 ggplot2 主题机制设计背景样式</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>library(ggplot2)</span></span>
<span class="line"><span>library(cowplot)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># define a function that emits the desired plot</span></span>
<span class="line"><span>p1 &lt;- function() {</span></span>
<span class="line"><span>  par(</span></span>
<span class="line"><span>    mar = c(3, 3, 1, 1),</span></span>
<span class="line"><span>    mgp = c(2, 1, 0)</span></span>
<span class="line"><span>  )</span></span>
<span class="line"><span>  boxplot(mpg ~ cyl, xlab = &quot;cyl&quot;, ylab = &quot;mpg&quot;, data = mtcars)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ggdraw(p1) +</span></span>
<span class="line"><span>  theme(plot.background = element_rect(fill = &quot;cornsilk&quot;))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291057784.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>添加一个logo</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>logo_file &lt;- system.file(&quot;extdata&quot;, &quot;logo.png&quot;, package = &quot;cowplot&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ggdraw() + </span></span>
<span class="line"><span>  draw_image(</span></span>
<span class="line"><span>    logo_file,</span></span>
<span class="line"><span>    x = 1, width = 0.1,</span></span>
<span class="line"><span>    hjust = 1, halign = 1, valign = 0</span></span>
<span class="line"><span>  ) +</span></span>
<span class="line"><span>  draw_plot(p1)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291058527.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>我们还可以在绘图网格中并排绘制基础图形和 ggplot2 图形。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>p2 &lt;- ggplot(data = mtcars, aes(factor(cyl), mpg)) + geom_boxplot()</span></span>
<span class="line"><span>plot_grid(p1, p2)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291058080.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>R 基本图可以以函数的形式存储，这些函数可以发出所需的图（如上所示），也可以以记录图的形式存储，还可以使用方便的公式界面。</p><p>要创建记录图形，我们首先要绘制基本图形，然后用 recordPlot() 将其记录下来，最后再用 ggdraw() 绘制。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># create base R plot</span></span>
<span class="line"><span>par(mar = c(3, 3, 1, 1), mgp = c(2, 1, 0))</span></span>
<span class="line"><span>boxplot(mpg ~ cyl, xlab = &quot;cyl&quot;, ylab = &quot;mpg&quot;, data = mtcars)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291058405.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># record previous base R plot and then draw through ggdraw()</span></span>
<span class="line"><span>p1_recorded &lt;- recordPlot()</span></span>
<span class="line"><span>ggdraw(p1_recorded)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291059613.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>我们可以在公式中存储任意复杂的绘图代码，只需将其括入大括号中即可。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># store base R plot as formula</span></span>
<span class="line"><span>p1_formula &lt;- ~{</span></span>
<span class="line"><span>  par(</span></span>
<span class="line"><span>    mar = c(3, 3, 1, 1), </span></span>
<span class="line"><span>    mgp = c(2, 1, 0)</span></span>
<span class="line"><span>  )</span></span>
<span class="line"><span>  boxplot(mpg ~ cyl, xlab = &quot;cyl&quot;, ylab = &quot;mpg&quot;, data = mtcars)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>ggdraw(p1_formula)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291100494.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>同样支持 lattice graphics 和 grid grobs.</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># base R</span></span>
<span class="line"><span>p1 &lt;- ~{</span></span>
<span class="line"><span>  par(</span></span>
<span class="line"><span>    mar = c(3, 3, 1, 1), </span></span>
<span class="line"><span>    mgp = c(2, 1, 0)</span></span>
<span class="line"><span>  )</span></span>
<span class="line"><span>  boxplot(mpg ~ cyl, xlab = &quot;cyl&quot;, ylab = &quot;mpg&quot;, data = mtcars)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># ggplot2</span></span>
<span class="line"><span>p2 &lt;- ggplot(data = mtcars, aes(factor(cyl), mpg)) + geom_boxplot()</span></span>
<span class="line"><span></span></span>
<span class="line"><span># lattice</span></span>
<span class="line"><span>library(lattice)</span></span>
<span class="line"><span>p3 &lt;- bwplot(~mpg | cyl, data = mtcars)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># elementary grid graphics objects</span></span>
<span class="line"><span>library(grid)</span></span>
<span class="line"><span>p4 &lt;- circleGrob(r = 0.3, gp = gpar(fill = &quot;skyblue&quot;))</span></span>
<span class="line"><span></span></span>
<span class="line"><span># combine all into one plot</span></span>
<span class="line"><span>plot_grid(p1, p2, p3, p4, rel_heights = c(.6, 1), labels = &quot;auto&quot;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291100531.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>`,268)]))}const g=n(l,[["render",p],["__file","第83期 R语言-cowplot包最佳拼图包超详细教程.html.vue"]]),o=JSON.parse('{"path":"/%E4%BB%A3%E7%A0%81%E6%95%99%E7%A8%8B/R%E8%AF%AD%E8%A8%80/%E7%AC%AC83%E6%9C%9F%20R%E8%AF%AD%E8%A8%80-cowplot%E5%8C%85%E6%9C%80%E4%BD%B3%E6%8B%BC%E5%9B%BE%E5%8C%85%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B.html","title":"第83期 R语言-cowplot包最佳拼图包超详细教程","lang":"zh-CN","frontmatter":{"类型":"公众号","公众号内容":["代码-R教程"],"rating":["⭐⭐"],"简记":"太长了，有需要看","title":"第83期 R语言-cowplot包最佳拼图包超详细教程","description":"第83期 cowplot包进行拼图及注释 本期介绍R语言cowplot包的效果和详细教程 个人觉得是目前最好的R语言拼图包 内容主要基于包的完全文档的翻译和笔记 第四部分详细功能展示非常详细，有需要的朋友可以先不看，或者找有时间的时候看。公众号不支持目录跳转，所以导出推文全文为PDF，后台回复“240329”获取 Cowplot安装 Cowplot粗略...","head":[["meta",{"property":"og:url","content":"https://wk42.top/%E4%BB%A3%E7%A0%81%E6%95%99%E7%A8%8B/R%E8%AF%AD%E8%A8%80/%E7%AC%AC83%E6%9C%9F%20R%E8%AF%AD%E8%A8%80-cowplot%E5%8C%85%E6%9C%80%E4%BD%B3%E6%8B%BC%E5%9B%BE%E5%8C%85%E8%B6%85%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"第83期 R语言-cowplot包最佳拼图包超详细教程"}],["meta",{"property":"og:description","content":"第83期 cowplot包进行拼图及注释 本期介绍R语言cowplot包的效果和详细教程 个人觉得是目前最好的R语言拼图包 内容主要基于包的完全文档的翻译和笔记 第四部分详细功能展示非常详细，有需要的朋友可以先不看，或者找有时间的时候看。公众号不支持目录跳转，所以导出推文全文为PDF，后台回复“240329”获取 Cowplot安装 Cowplot粗略..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291051514.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-02T10:14:49.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-02T10:14:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第83期 R语言-cowplot包最佳拼图包超详细教程\\",\\"image\\":[\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291051514.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291053884.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291053159.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291054276.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291055140.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291102694.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291103767.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291103478.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291103526.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291104757.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291105902.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291105675.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291106137.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291106296.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291107819.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291107539.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291108137.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291109202.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291111341.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291112770.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291113674.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291113072.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291114290.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291115354.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291118304.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291118015.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291119887.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291119646.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291121779.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291121531.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291124081.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291124386.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291125829.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291126270.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291126696.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291127733.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291128061.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291129528.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291013337.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291013116.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291017000.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291017067.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291018372.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291022519.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291023129.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291024175.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291025988.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291027731.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291028363.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291029107.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291029182.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291035386.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291036610.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291037101.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291041905.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291042517.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291043607.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291044069.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291045397.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291046082.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291047171.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291048102.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291048082.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291057784.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291058527.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291058080.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291058405.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291059613.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291100494.png\\",\\"https://pic-go-42.oss-cn-guangzhou.aliyuncs.com/img/202403291100531.png\\"],\\"dateModified\\":\\"2024-11-02T10:14:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"wang\\",\\"url\\":\\"https://intro.wk8686.top/\\"}]}"]]},"headers":[{"level":2,"title":"Cowplot安装","slug":"cowplot安装","link":"#cowplot安装","children":[]},{"level":2,"title":"Cowplot粗略介绍","slug":"cowplot粗略介绍","link":"#cowplot粗略介绍","children":[{"level":3,"title":"用网格来排版拼接图形","slug":"用网格来排版拼接图形","link":"#用网格来排版拼接图形","children":[]},{"level":3,"title":"添加图形文字或图形标注","slug":"添加图形文字或图形标注","link":"#添加图形文字或图形标注","children":[]}]},{"level":2,"title":"Cowplot函数展示","slug":"cowplot函数展示","link":"#cowplot函数展示","children":[{"level":3,"title":"图形组合","slug":"图形组合","link":"#图形组合","children":[]},{"level":3,"title":"绘图","slug":"绘图","link":"#绘图","children":[]},{"level":3,"title":"主题","slug":"主题-1","link":"#主题-1","children":[]},{"level":3,"title":"获取方法","slug":"获取方法","link":"#获取方法","children":[]},{"level":3,"title":"Grobs","slug":"grobs","link":"#grobs","children":[]},{"level":3,"title":"输出","slug":"输出","link":"#输出","children":[]}]},{"level":2,"title":"Cowplot功能详细展示","slug":"cowplot功能详细展示","link":"#cowplot功能详细展示","children":[{"level":3,"title":"在网格中拼图","slug":"在网格中拼图","link":"#在网格中拼图","children":[]},{"level":3,"title":"设置主题","slug":"设置主题","link":"#设置主题","children":[]},{"level":3,"title":"图形对齐（控制长宽等可对齐）","slug":"图形对齐-控制长宽等可对齐","link":"#图形对齐-控制长宽等可对齐","children":[]},{"level":3,"title":"叠加绘图","slug":"叠加绘图","link":"#叠加绘图","children":[]},{"level":3,"title":"混合不同绘图框架的图(如ggplot2和base)","slug":"混合不同绘图框架的图-如ggplot2和base","link":"#混合不同绘图框架的图-如ggplot2和base","children":[]}]}],"git":{"createdTime":1730542489000,"updatedTime":1730542489000,"contributors":[{"name":"WangKang","email":"888666wang4286@gmail.com","commits":1}]},"readingTime":{"minutes":23.7,"words":7111},"filePathRelative":"代码教程/R语言/第83期 R语言-cowplot包最佳拼图包超详细教程.md","localizedDate":"2024年11月2日","excerpt":"<blockquote>\\n<p>第83期 cowplot包进行拼图及注释</p>\\n<p>本期介<strong>绍R语言cowplot包的效果和详细教程</strong></p>\\n<p>个人觉得是<strong>目前最好的R语言拼图包</strong></p>\\n<p>内容主要基于包的<a href=\\"https://wilkelab.org/cowplot/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">完全文档的翻译和笔记</a></p>\\n<p><strong>第四部分详细功能展示非常详细，有需要的朋友可以先不看，或者找有时间的时候看</strong>。公众号不支持目录跳转，所以导出推文全文为PDF，后台回复“<strong>240329</strong>”获取</p>\\n</blockquote>","autoDesc":true}');export{g as comp,o as data};
